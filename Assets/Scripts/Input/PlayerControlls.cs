//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControlls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlls"",
    ""maps"": [
        {
            ""name"": ""PlayerInputs"",
            ""id"": ""2d407895-3e77-40ac-8d05-0647e72c188c"",
            ""actions"": [
                {
                    ""name"": ""Player1MoveRightOrLeft"",
                    ""type"": ""Button"",
                    ""id"": ""59bbbbe4-52c1-471d-b426-304285cf08af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player1UseBoost"",
                    ""type"": ""Button"",
                    ""id"": ""c371e036-fd3e-4c16-8af5-c1894c061271"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player2UseBoost"",
                    ""type"": ""Button"",
                    ""id"": ""99296e63-553b-429c-a8f9-1a9966dfa6fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player2MoveRightOrLeft"",
                    ""type"": ""Button"",
                    ""id"": ""d1da3949-85ca-4a81-9c85-73b2eb286f0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e6ea6df6-faaf-43cd-adf7-f9b2847afdac"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2UseBoost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""851ef368-d29a-4289-ad35-ee4ab0a131a0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2MoveRightOrLeft"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""9398a27c-06c4-4504-b5d0-e5029b552f23"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2MoveRightOrLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""065b2021-62f4-48f5-ac69-ec0b55a1c9fd"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2MoveRightOrLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fc4a69e9-da89-4630-b846-b6f7ec3c8711"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1UseBoost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8aa21415-cb10-4e3c-8e6c-24b91c772b21"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1MoveRightOrLeft"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""93a548af-84dd-496d-96cb-6a5d2cac5914"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1MoveRightOrLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""139e1431-4188-4afc-be87-c5305dd3bd69"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1MoveRightOrLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInputs
        m_PlayerInputs = asset.FindActionMap("PlayerInputs", throwIfNotFound: true);
        m_PlayerInputs_Player1MoveRightOrLeft = m_PlayerInputs.FindAction("Player1MoveRightOrLeft", throwIfNotFound: true);
        m_PlayerInputs_Player1UseBoost = m_PlayerInputs.FindAction("Player1UseBoost", throwIfNotFound: true);
        m_PlayerInputs_Player2UseBoost = m_PlayerInputs.FindAction("Player2UseBoost", throwIfNotFound: true);
        m_PlayerInputs_Player2MoveRightOrLeft = m_PlayerInputs.FindAction("Player2MoveRightOrLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputs
    private readonly InputActionMap m_PlayerInputs;
    private List<IPlayerInputsActions> m_PlayerInputsActionsCallbackInterfaces = new List<IPlayerInputsActions>();
    private readonly InputAction m_PlayerInputs_Player1MoveRightOrLeft;
    private readonly InputAction m_PlayerInputs_Player1UseBoost;
    private readonly InputAction m_PlayerInputs_Player2UseBoost;
    private readonly InputAction m_PlayerInputs_Player2MoveRightOrLeft;
    public struct PlayerInputsActions
    {
        private @PlayerControlls m_Wrapper;
        public PlayerInputsActions(@PlayerControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player1MoveRightOrLeft => m_Wrapper.m_PlayerInputs_Player1MoveRightOrLeft;
        public InputAction @Player1UseBoost => m_Wrapper.m_PlayerInputs_Player1UseBoost;
        public InputAction @Player2UseBoost => m_Wrapper.m_PlayerInputs_Player2UseBoost;
        public InputAction @Player2MoveRightOrLeft => m_Wrapper.m_PlayerInputs_Player2MoveRightOrLeft;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Add(instance);
            @Player1MoveRightOrLeft.started += instance.OnPlayer1MoveRightOrLeft;
            @Player1MoveRightOrLeft.performed += instance.OnPlayer1MoveRightOrLeft;
            @Player1MoveRightOrLeft.canceled += instance.OnPlayer1MoveRightOrLeft;
            @Player1UseBoost.started += instance.OnPlayer1UseBoost;
            @Player1UseBoost.performed += instance.OnPlayer1UseBoost;
            @Player1UseBoost.canceled += instance.OnPlayer1UseBoost;
            @Player2UseBoost.started += instance.OnPlayer2UseBoost;
            @Player2UseBoost.performed += instance.OnPlayer2UseBoost;
            @Player2UseBoost.canceled += instance.OnPlayer2UseBoost;
            @Player2MoveRightOrLeft.started += instance.OnPlayer2MoveRightOrLeft;
            @Player2MoveRightOrLeft.performed += instance.OnPlayer2MoveRightOrLeft;
            @Player2MoveRightOrLeft.canceled += instance.OnPlayer2MoveRightOrLeft;
        }

        private void UnregisterCallbacks(IPlayerInputsActions instance)
        {
            @Player1MoveRightOrLeft.started -= instance.OnPlayer1MoveRightOrLeft;
            @Player1MoveRightOrLeft.performed -= instance.OnPlayer1MoveRightOrLeft;
            @Player1MoveRightOrLeft.canceled -= instance.OnPlayer1MoveRightOrLeft;
            @Player1UseBoost.started -= instance.OnPlayer1UseBoost;
            @Player1UseBoost.performed -= instance.OnPlayer1UseBoost;
            @Player1UseBoost.canceled -= instance.OnPlayer1UseBoost;
            @Player2UseBoost.started -= instance.OnPlayer2UseBoost;
            @Player2UseBoost.performed -= instance.OnPlayer2UseBoost;
            @Player2UseBoost.canceled -= instance.OnPlayer2UseBoost;
            @Player2MoveRightOrLeft.started -= instance.OnPlayer2MoveRightOrLeft;
            @Player2MoveRightOrLeft.performed -= instance.OnPlayer2MoveRightOrLeft;
            @Player2MoveRightOrLeft.canceled -= instance.OnPlayer2MoveRightOrLeft;
        }

        public void RemoveCallbacks(IPlayerInputsActions instance)
        {
            if (m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputsActions @PlayerInputs => new PlayerInputsActions(this);
    public interface IPlayerInputsActions
    {
        void OnPlayer1MoveRightOrLeft(InputAction.CallbackContext context);
        void OnPlayer1UseBoost(InputAction.CallbackContext context);
        void OnPlayer2UseBoost(InputAction.CallbackContext context);
        void OnPlayer2MoveRightOrLeft(InputAction.CallbackContext context);
    }
}
